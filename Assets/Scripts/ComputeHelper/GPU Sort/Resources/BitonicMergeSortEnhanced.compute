#pragma kernel Sort
#pragma kernel CalculateOffsets

/* This version of the Bitonic Sort is enchanced to efficiently handle better arrays of data by fully
utilizing the parallel processing capabilities of modern GPUs. The key improvements include better index management 
and optimized thread utilization.*/

struct Entry
{
	uint originalIndex;
	uint hash;
	uint key;
};

RWStructuredBuffer<Entry> Entries;
const uint numEntries;
const uint groupWidth;
const uint groupHeight;
const uint stepIndex;

// This kernel sorts the given entries by their keys using bitonic merge sort.
[numthreads(128, 1, 1)]
void Sort(uint3 id : SV_DispatchThreadID)
{
    uint threadID = id.x;
    uint hIndex = threadID & (groupWidth - 1);
    uint indexLeft = hIndex + (groupHeight + 1) * (threadID / groupWidth);
    uint rightStepSize = stepIndex == 0 ? groupHeight - 2 * hIndex : (groupHeight + 1) / 2;
    uint indexRight = indexLeft + rightStepSize;

    // Guard against out-of-bounds access
    if (indexRight >= numEntries || indexLeft >= numEntries) return;

    uint keyLeft = Entries[indexLeft].key;
    uint keyRight = Entries[indexRight].key;

    // Conditionally swap entries to maintain order
    if (keyLeft > keyRight)
    {
        Entry temp = Entries[indexLeft];
        Entries[indexLeft] = Entries[indexRight];
        Entries[indexRight] = temp;
    }
}

RWStructuredBuffer<uint> Offsets;
// This kernel calculates offsets for spatial hashing of sorted entries.
[numthreads(128, 1, 1)]
void CalculateOffsets(uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= numEntries) return; // Prevent out-of-bounds access

    uint currentKey = Entries[i].key;
    uint previousKey = i == 0 ? numEntries : Entries[i - 1].key; // Use numEntries as a null value

    // Set offset for the start of each unique key
    if (currentKey != previousKey)
    {
        Offsets[currentKey] = i;
    }
}